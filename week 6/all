import socket
import ipaddress
import threading
import time

# Exercise 1: IP Address Analysis
def analyse_ip(ip_str):
    ip = ipaddress.ip_interface(ip_str)
    print(f"Address: {ip.ip}")
    print(f"Network: {ip.network}")
    print(f"Netmask: {ip.netmask}")
    print(f"Broadcast Address: {ip.network.broadcast_address}")
    print(f"First Host: {list(ip.network.hosts())[0]}")
    print(f"Last Host: {list(ip.network.hosts())[-1]}")
    print(f"Number of Usable Hosts: {ip.network.num_addresses - 2}")

# Exercise 2: Get Your Own IP Address
def get_own_ip():
    hostname = socket.gethostname()
    ip_address = socket.gethostbyname(hostname)
    print(f"Your Computer Name: {hostname}")
    print(f"Your Computer IP Address: {ip_address}")

# Exercise 3: University Website IP Lookup
def get_website_ip(website):
    try:
        ip_address = socket.gethostbyname(website)
        print(f"The IP address of {website} is {ip_address}")
        analyse_ip(ip_address + '/24')
    except socket.gaierror:
        print("Unable to retrieve IP address.")

# Exercise 4: Subnetting Plan for Departments
def subnetting_plan():
    company_network = ipaddress.ip_network("172.16.0.0/16", strict=False)
    subnets = list(company_network.subnets(new_prefix=27))  # /27 allows enough hosts per department
    departments = ["Engineering", "Marketing", "Finance", "HR"]
    required_hosts = [30, 15, 10, 5]
    
    print("Subnet Allocation:")
    for i, dept in enumerate(departments):
        print(f"{dept}: {subnets[i]}")

# Exercise 5: Simulated DHCP Process
def dhcp_simulation():
    server = {"ip_pool": ["192.168.1.100", "192.168.1.101", "192.168.1.102"], "leases": {}}
    client = {"mac": "AA:BB:CC:DD:EE:FF", "ip": None}
    
    def send_discover():
        print("\n[CLIENT] Step 1: Sending DHCP DISCOVER")
        return {"type": "DISCOVER", "mac": client["mac"]}
    
    def make_offer(discover):
        print("\n[SERVER] Step 2: Making DHCP OFFER")
        if not server["ip_pool"]:
            print("No IPs available!")
            return None
        offered_ip = server["ip_pool"].pop(0)
        return {"type": "OFFER", "mac": discover["mac"], "ip": offered_ip}
    
    def send_request(offer):
        print("\n[CLIENT] Step 3: Sending DHCP REQUEST")
        return {"type": "REQUEST", "mac": offer["mac"], "ip": offer["ip"]}
    
    def send_ack(request):
        print("\n[SERVER] Step 4: Sending DHCP ACK")
        server["leases"][request["mac"]] = request["ip"]
        return {"type": "ACK", "mac": request["mac"], "ip": request["ip"]}
    
    discover = send_discover()
    offer = make_offer(discover)
    if not offer:
        return
    request = send_request(offer)
    ack = send_ack(request)
    client["ip"] = ack["ip"]
    print("\n=== Result ===")
    print(f"Client {client['mac']} got IP: {client['ip']}")
    print("Server leases:", server["leases"])

# Run all the exercises
if __name__ == "__main__":
    analyse_ip("192.168.1.1/24")
    get_own_ip()
    get_website_ip("gold.ac.uk")
    subnetting_plan()
    dhcp_simulation()
    print("\nAll Week 6 exercises executed successfully!\n")